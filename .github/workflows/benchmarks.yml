name: Foundry Benchmarks

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to comment on (optional)"
        required: false
        type: string
      versions:
        description: "Comma-separated list of Foundry versions to benchmark (e.g., stable,nightly,v1.0.0)"
        required: false
        type: string
        default: "stable,nightly"
      repos:
        description: "Comma-separated list of repos to benchmark (e.g., ithacaxyz/account:main,Vectorized/solady)"
        required: false
        type: string
        default: "ithacaxyz/account:v0.3.2,Vectorized/solady:v0.1.22"

permissions:
  contents: write
  pull-requests: write

jobs:
  forge-test:
    name: Run forge_test and forge_fuzz_test benchmarks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            ./

      - name: Install foundryup
        run: |
          curl -L https://foundry.paradigm.xyz | bash
          echo "$HOME/.foundry/bin" >> $GITHUB_PATH
          
          # Create a symlink to make foundryup available system-wide
          sudo ln -sf $HOME/.foundry/bin/foundryup /usr/local/bin/foundryup
          
          # Verify installation
          foundryup --version

      - name: Build benchmark binary
        run: cargo build --release --bin foundry-bench

      - name: Run forge_test and forge_fuzz_test benchmarks
        run: |
          VERSIONS="${{ github.event.inputs.versions || 'stable,nightly' }}"
          REPOS="${{ github.event.inputs.repos || 'ithacaxyz/account:v0.3.2,Vectorized/solady:v0.1.22' }}"

          
          # Build the command with force-install for CI
          CMD="./target/release/foundry-bench --output-dir ./benches --force-install"
          CMD="$CMD --versions $VERSIONS"
          CMD="$CMD --repos $REPOS"
          CMD="$CMD --benchmarks forge_test,forge_fuzz_test"
          CMD="$CMD --output-file forge_test_results.md"

          echo "Running: $CMD"
          $CMD

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: forge-test-results
          path: benches/forge_test_results.md

  forge-build:
    name: Run forge_build benchmarks (with and without cache)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            ./

      - name: Install foundryup
        run: |
          curl -L https://foundry.paradigm.xyz | bash
          echo "$HOME/.foundry/bin" >> $GITHUB_PATH
          
          # Create a symlink to make foundryup available system-wide
          sudo ln -sf $HOME/.foundry/bin/foundryup /usr/local/bin/foundryup
          
          # Verify installation
          foundryup --version

      - name: Build benchmark binary
        run: cargo build --release --bin foundry-bench

      - name: Run forge_build benchmarks (with and without cache)
        run: |
          VERSIONS="${{ github.event.inputs.versions || 'stable,nightly' }}"
          REPOS="${{ github.event.inputs.repos || 'ithacaxyz/account:v0.3.2,Vectorized/solady:v0.1.22' }}"

          
          # Build the command with force-install for CI
          CMD="./target/release/foundry-bench --output-dir ./benches --force-install"
          CMD="$CMD --versions $VERSIONS"
          CMD="$CMD --repos $REPOS"
          CMD="$CMD --benchmarks forge_build_with_cache,forge_build_no_cache"
          CMD="$CMD --output-file forge_build_results.md"

          echo "Running: $CMD"
          $CMD

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: forge-build-results
          path: benches/forge_build_results.md

  forge-coverage:
    name: Run forge_coverage benchmark
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            ./

      - name: Install foundryup
        run: |
          curl -L https://foundry.paradigm.xyz | bash
          echo "$HOME/.foundry/bin" >> $GITHUB_PATH
          
          # Create a symlink to make foundryup available system-wide
          sudo ln -sf $HOME/.foundry/bin/foundryup /usr/local/bin/foundryup
          
          # Verify installation
          foundryup --version

      - name: Build benchmark binary
        run: cargo build --release --bin foundry-bench

      - name: Run forge_coverage benchmark
        run: |
          VERSIONS="${{ github.event.inputs.versions || 'stable,nightly' }}"
          REPOS="${{ github.event.inputs.repos || 'ithacaxyz/account:v0.3.2,Vectorized/solady:v0.1.22' }}"

          
          # Build the command with force-install for CI
          CMD="./target/release/foundry-bench --output-dir ./benches --force-install"
          CMD="$CMD --versions $VERSIONS"
          CMD="$CMD --repos $REPOS"
          CMD="$CMD --benchmarks forge_coverage"
          CMD="$CMD --output-file forge_coverage_results.md"

          echo "Running: $CMD"
          $CMD

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: forge-coverage-results
          path: benches/forge_coverage_results.md

  collect-results:
    name: Collect and commit results
    runs-on: ubuntu-latest
    needs: [forge-test, forge-build, forge-coverage]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: benches/

      - name: Combine benchmark results
        run: |
          # Create combined results file
          echo "# Foundry Benchmark Results" > benches/LATEST.md
          echo "" >> benches/LATEST.md
          echo "Generated on: $(date -u)" >> benches/LATEST.md
          echo "" >> benches/LATEST.md

          # Add forge_test results if available
          if [ -f "benches/forge-test-results/forge_test_results.md" ]; then
            echo "## Forge Test and Fuzz Test Results" >> benches/LATEST.md
            echo "" >> benches/LATEST.md
            tail -n +2 benches/forge-test-results/forge_test_results.md >> benches/LATEST.md
            echo "" >> benches/LATEST.md
          fi

          # Add forge_build results if available
          if [ -f "benches/forge-build-results/forge_build_results.md" ]; then
            echo "## Forge Build Results" >> benches/LATEST.md
            echo "" >> benches/LATEST.md
            tail -n +2 benches/forge-build-results/forge_build_results.md >> benches/LATEST.md
            echo "" >> benches/LATEST.md
          fi

          # Add forge_coverage results if available
          if [ -f "benches/forge-coverage-results/forge_coverage_results.md" ]; then
            echo "## Forge Coverage Results" >> benches/LATEST.md
            echo "" >> benches/LATEST.md
            tail -n +2 benches/forge-coverage-results/forge_coverage_results.md >> benches/LATEST.md
            echo "" >> benches/LATEST.md
          fi

          # Clean up artifact directories
          rm -rf benches/forge-test-results
          rm -rf benches/forge-build-results
          rm -rf benches/forge-coverage-results

      - name: Commit benchmark results
        if: github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add benches/LATEST.md benches/forge_test_results.md benches/forge_build_results.md benches/forge_coverage_results.md 2>/dev/null || true
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(\`benches\`): update benchmark results

            ðŸ¤– Generated with [Foundry Benchmarks](https://github.com/${{ github.repository }}/actions)
            
            Co-Authored-By: github-actions <github-actions@github.com>"
            git push
          fi

      - name: Read benchmark results
        id: benchmark_results
        run: |
          if [ -f "benches/LATEST.md" ]; then
            {
              echo 'results<<EOF'
              cat benches/LATEST.md
              echo 'EOF'
            } >> $GITHUB_OUTPUT
          else
            echo 'results=No benchmark results found.' >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR
        if: github.event.inputs.pr_number != '' || github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ github.event.inputs.pr_number || github.event.pull_request.number }};
            const benchmarkResults = `${{ steps.benchmark_results.outputs.results }}`;

            const comment = `## ðŸ“Š Foundry Benchmark Results

            <details>
            <summary>Click to view detailed benchmark results</summary>

            ${benchmarkResults}

            </details>

            ---

            ðŸ¤– This comment was automatically generated by the [Foundry Benchmarks workflow](https://github.com/${{ github.repository }}/actions).

            To run benchmarks manually: Go to [Actions](https://github.com/${{ github.repository }}/actions/workflows/benchmarks.yml) â†’ "Run workflow"`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });