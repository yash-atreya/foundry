searchState.loadedDescShard("cast", 61, "Returns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nCalculates the maximum [EIP-4844] <code>data_fee</code> of the …\nCaller aka Author aka transaction signer.\nReturns authorization the chain id.\nChain Id is optional for legacy transactions.\nGet the <code>chain_id</code> for the authorization.\nThe chain ID of the authorization.\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nChecks if the access list contains the specified address.\nChecks if a specific storage slot within an account is …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns the effective balance that is going to be spent …\nReturns effective gas price is gas price field for Legacy …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns an iterator over the list’s addresses and …\nConverts the list into a vec, expected by revm\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe maximum amount of gas the transaction can use.\nGas price for the transaction. It is only applicable for …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns the inner <code>Authorization</code>.\nReturns the input data of the transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the type and returns an iterator over the list’…\nConsumes the type and converts the list into a vec, …\nSplits the authorization into parts.\nRecover the authority and transform the signed …\nConvert to a signed authorization by adding a signature.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns true if the authority is invalid.\nReturns true if the authority is valid.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nTransaction kind. It can be Call or Create.\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns the maximum balance that can be spent by the …\nMax fee per data gas\nReturns maximum fee that can be paid for the transaction.\nMaximum priority fee per gas.\nCreates a new signed authorization from raw signature …\nInstantiate without performing recovery. This should be …\nReturns the nonce.\nThe nonce of the transaction.\nGet the <code>nonce</code> for the authorization.\nThe nonce for the authorization.\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns the signature <code>r</code> value.\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nRecover the authority for the authorization.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns the signature <code>s</code> value.\nGets the <code>signature</code> for the authorization. Returns …\nComputes the signature hash used to sign the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nKeys of storage that would be loaded at the start of …\nReturns the total number of storage keys in this access …\nReturns storage slot keys.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns the inner <code>Authorization</code>.\nTotal gas for all blobs. Max number of blocks is already …\nReturns the transaction type.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nThe value sent to the receiver of <code>TxKind::Call</code>.\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns the signature parity value.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nAccess list type is introduced in EIP-2930, and every …\nReturns account address.\nReturns storage slot keys.\nAuthorization trait.\nReturns the address that this account is delegated to.\nAuthority address.\nReturns authorization the chain id.\nReturns the nonce.\nCustom type means that the transaction trait was extended …\nEIP-1559 Fee market change transaction type\nEIP-2930 Access List transaction type\nEIP-4844 Blob transaction type\nEIP-7702 Set EOA account code transaction type\nLegacy transaction type\nTransaction types of all Ethereum transaction\nDerive tx type error\nError type for deriving transaction type used as error in …\nMissing authorization list for EIP-7702\nMissing blob hashes for EIP-4844\nMissing priority fee for EIP-1559\nMissing target for EIP-4844\nMissing target for EIP-4844\nMissing target for EIP-7702\nMissing target for EIP-7873\nThe Transaction Environment is a struct that contains all …\nError type for building <code>TxEnv</code>\nBuilder for constructing <code>TxEnv</code> instances\nSet the access list\nA list of addresses and storage keys that the transaction …\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nSet the authorization list\nList of authorizations\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nSet the blob hashes\nThe list of blob versioned hashes\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nBuild the final <code>TxEnv</code>, returns error if some fields are …\nBuild the final <code>TxEnv</code> with default values for missing …\nSet the caller address\nCaller aka Author aka transaction signer\nSet the chain ID\nThe chain ID of the transaction\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nSet the transaction data\nThe data of the transaction\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the gas limit\nThe gas limit of the transaction.\nSet the gas price\nThe gas price of the transaction.\nSet the gas priority fee\nThe priority fee per gas\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nSet the transaction kind\nThe destination of the transaction\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nSet the max fee per blob gas\nThe max fee per blob gas\nSet the max fee per gas.\nCreate a new builder with default values\nSet the transaction nonce\nThe nonce of the transaction\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nSet the transaction type\nTransaction type\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nSet the transaction value\nThe value sent to <code>transact_to</code>\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nTrait for retrieving block information required for …\nBlock type\nA transaction that calls a contract or transfer.\nConfiguration type\nChain type\nTrait that defines the context of the EVM execution.\nA transaction that creates a contract.\nLegacy create scheme of <code>CREATE</code>\nCreate scheme of <code>CREATE2</code>\nCreate scheme\nCustom scheme where we set up the original address\nCustom type means that the transaction trait was extended …\nDatabase error marker is needed to implement From …\nEVM database interface.\nDatabase type\nEIP-1559 Fee market change transaction type\nEIP-2930 Access List transaction type\nEIP-4844 Blob transaction type\nEIP-7702 Set EOA account code transaction type\nThe database error type.\nJournal type\nTrait that contains database and journal of all changes …\nLegacy transaction type\nLocal context type\nLocal context used for caching initcode from Initcode …\nTransaction destination\nMain Transaction trait that abstracts and specifies all …\nTransaction types of all Ethereum transaction\nTransaction type\nAccess list for the transaction.\nList of authorizations, that contains the signature that …\nReturns length of the authorization list.\nThe base fee per gas, added in the London upgrade with …\nGets basic account information.\nBeneficiary (Coinbase, miner) is a address that have …\nExcess blob gas and blob gasprice. See also …\nReturns the blob target and max count for the given spec …\nReturns vector of fixed size hash(32 bytes)\nGet the block\nGets block hash by block number.\nCaller aka Author aka transaction signer.\nGet the configuration\nGet the chain\nChain Id is optional for legacy transactions.\nGet the chain reference\nCreates a checkpoint of the current state. State can be …\nCommits the changes made since the last checkpoint.\nReverts the changes made since the last checkpoint.\nCalled at the end of the transaction to clean all residue …\nClear the local context.\nGets account code by its hash.\nCreates a checkpoint of the account creation.\nReturns the mutable database.\nGet the database\nReturns the database.\nGet the database reference\nReturns the depth of the journal.\nThe difficulty of the block.\nGet the error\nDoes cleanup and returns modified state.\nThe gas limit of the block.\nThe maximum amount of gas the transaction can use.\nGas price for the transaction. It is only applicable for …\nGet validated initcode by hash. if initcode is not …\nIncrements the nonce of the account.\nReturns the input data of the transaction.\nGet the local context\nGet the journal\nGet the journal reference\nTransaction kind. It can be Call or Create.\nLoads the account.\nLoads the account code.\nLoads the account delegated.\nGet the local context\nLogs the log in Journal state.\nMax fee per data gas\nMaximum priority fee per gas.\nCreates new Journaled state.\nThe nonce of the transaction.\nThe number of ancestor blocks of this block (block height).\nReturns the addresses of the precompiles.\nThe output of the randomness beacon provided by the beacon …\nMarks the account for selfdestruction and transfers all …\nSets bytecode with hash. Assume that account is warm.\nSets the spec id.\nInterpreter shared memory buffer. A reused memory buffer …\nReturns the storage value from Journal state.\nStores the storage value in Journal state.\nGets storage value of address at index.\nThe timestamp of the block in seconds since the UNIX epoch.\nLoads transient storage value.\nTouches the account.\nTransfers the balance from one account to another.\nStores transient storage value.\nGet the transaction\nGet the transaction and journal. It is used to efficiently …\nGet the transaction and local context. It is used to …\nReturns the transaction type.\nThe value sent to the receiver of <code>TxKind::Call</code>.\nWarms the account.\nWarms the account and storage.\nWarms the precompiles.\nSalt\nStructure holding block blob excess gas and it calculates …\nTrait for retrieving block information required for …\nEnables the styling <code>Attribute</code> <code>value</code>.\nThe base fee per gas, added in the London upgrade with …\nBeneficiary (Coinbase, miner) is a address that have …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nExcess blob gas and blob gasprice. See also …\nThe calculated blob gas price based on the <code>excess_blob_gas</code>\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nThe difficulty of the block.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nThe excess blob gas of the block\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns the argument unchanged.\nCalculate this block excess gas and price from the parent …\nThe gas limit of the block.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nCreates a new instance by calculating the blob gas price …\nThe number of ancestor blocks of this block (block height).\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nThe output of the randomness beacon provided by the beacon …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nThe timestamp of the block in seconds since the UNIX epoch.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nStructure holding block blob excess gas and it calculates …\nThe calculated blob gas price based on the <code>excess_blob_gas</code>\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nThe excess blob gas of the block\nApproximates <code>factor * e ** (numerator / denominator)</code> using …\nPerform bytecode analysis\nWhat bytecode analysis to perform\nA transaction that calls a contract or transfer.\nA transaction that creates a contract.\nLegacy create scheme of <code>CREATE</code>\nCreate scheme of <code>CREATE2</code>\nCreate scheme\nCustom scheme where we set up the original address\nDo not perform bytecode analysis\nTransaction destination\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns the blob target and max count for the given spec …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns the argument unchanged.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nSalt\nBlock type\nConfiguration type\nChain type\nInner Context error used for Interpreter to set error …\nTrait that defines the context of the EVM execution.\nCustom string error.\nDatabase error.\nDatabase type\nJournal type\nLocal context type\nRepresents the result of an <code>sstore</code> operation.\nResult of a selfdestruct action\nState load information that contains the data and if the …\nTransaction type\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nGet the block\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nGet the configuration\nGet the chain\nGet the chain reference\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturned data\nGet the database\nGet the database reference\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nGet the error\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns the argument unchanged.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nIs account is cold loaded\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nGet the journal\nGet the journal reference\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nGet the local context\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nNew value that is set\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nValue of the storage when it is first read\nCurrent value of the storage\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nGet the transaction\nGet the transaction and journal. It is used to efficiently …\nGet the transaction and local context. It is used to …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nLocal context used for caching initcode from Initcode …\nClear the local context.\nGet validated initcode by hash. if initcode is not …\nGet the local context\nInterpreter shared memory buffer. A reused memory buffer …\nAssumption is that Revert can return full state from any …\nAccountStatus represents the various states an account can …\nError type for implementation of <code>TryDatabaseCommit</code> on <code>Arc</code>.\nCustom benchmarking DB that only has account info for the …\nAccount information focused on creating of database …\nBundle state contain only values that got changed\nA cache used in CacheDB. Its kept separate so it can be …\nA Database implementation that stores all state changes in …\nCache state contains both modified and original values\nDatabase boxed with a lifetime and Send\nDatabase error marker is needed to implement From …\nEVM database interface.\nEVM database commit interface.\nEVM database interface.\nCALLER address\nAn empty database that always returns default values when …\nAn empty database that always returns default values when …\nError type for when <code>TryDatabaseCommit::try_commit</code> fails.\nThe database error type.\nThe database error type.\nBYTECODE address\nA Database implementation that stores all state changes in …\nDoesn’t check original values, see the implementation of …\nEVM didn’t interacted with this account\nBefore Spurious Dragon hardfork there was a difference …\nOption for <code>BundleState</code> when converting it to the plain …\nSo storage can have multiple types:\nState of blockchain\nAllows building of State and initializing it with …\nMore constrained version of State that uses Boxed database …\nEVM cleared storage of this account, mostly by …\nThis storage represent values that are before block …\nEVM touched this account. For newer hardfork this means it …\nAccount Created when EVM state is merged to cache state. …\nEVM database commit interface that can fail.\nWraps a <code>DatabaseRef</code> to provide a <code>Database</code> implementation.\nChecks changed with original values that BundleState has.\nGets account from state.\nFetch account info if it exists.\nIf account is selfdestructed or newly created, storage …\nAccount info where None means it is not existing. Not …\nBlock state account with account state\nAdd transitions to the transition state.\nApplies output of revm execution and create account …\nApplies evm transitions to transition state.\nConsumes <code>TransitionState</code> by applying the changes and …\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nGets basic account information.\nGet basic account information.\nGets basic account information.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nGets block hash by block number.\nGets block hash by block number.\nIf EVM asks for block hash, we will first check if they …\nAll cached block hashes from the DatabaseRef.\nIf EVM asks for block hash, we will first check if they …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns builder instance for further manipulation.\nReturn the builder that build the State.\nReturns the size hint for the inner bundle state.\nAfter block is finishes we merge those changes inside …\nAfter block is finishes we merge those changes inside …\nGets bytecode from state.\nThe cache that stores all state changes.\nCached state contains both changed from evm execution and …\nThe cache that stores all state changes.\nCached state contains both changed from evm execution and …\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nGets account code by its hash.\nGet account code by its hash\nGets account code by its hash.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCommit changes to the database.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nTracks all contracts by their code hash.\nAll created contracts in this block.\nCreated contracts\nConsume Self and create account revert from it.\nReturn the balance of account after transition.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nOptional database that we use to fetch data from\nOptional database that we use to fetch data from\nThe underlying database (DatabaseRef) that is used to load …\nThe underlying database (DatabaseRef) that is used to load …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nDiscards the outer cache and return the inner cache.\nDrains balances from given account and return those values.\nExtends the state with state that is build on top of it.\nExtends the bundle with other state.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nFlattens a nested cache by applying the outer cache to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturn new contract bytecode if it is changed or newly …\nHas EIP-161 state clear enabled (Spurious Dragon hardfork)\nIterates over received balances and increment all account …\nInserts Loaded (Or LoadedEmptyEip161 if account is empty) …\nInserts account info but not override storage\nInserts account storage without overriding account info\nSimilar to <code>insert_account</code> but with storage.\nInserts the account’s code into the cache.\nInserts not existing account.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the bundle state into a <code>StateChangeset</code>.\nConsumes the bundle state and split it into a …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturn true if contract was changed\nChecks whether bundle state is empty.\nReturns <code>true</code> if there is nothing to revert, by checking …\nReturn true of account info was changed.\nAccount is modified but not destroyed. This means that …\nOriginal value is not known for sure.\nAccount is not modified and just loaded from database.\nReturns <code>true</code> if EVM cleared storage of this account\nThis means storage is known, it can be newly created or …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturn number of changed accounts.\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns the account for the given address.\nGet a mutable reference to the <code>CacheAccount</code> for the given …\nAll logs that were committed via DatabaseCommit::commit.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nTake all transitions and merge them inside bundle state.\nWraps the cache in a CacheDB, creating a nested cache.\nCreates a new cache with the given external database.\nCreate new BundleAccount.\nCreates it with new and old values of both Storage and …\nCreates a new default state.\nCreates a new builder with an empty database.\nCreate new LoadedEmpty account.\nCreate new selfdestruct revert.\nVery similar to new_selfdestructed but it will add …\nCreates revert for states that were before selfdestruct.\nCreate a new builder with the given database.\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].")